{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-05T23:12:49.032Z",
    "end": "2025-08-05T23:13:13.643Z",
    "duration": 24611,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b4ac3711-be70-40ce-943d-4223debe6d3c",
      "title": "",
      "fullFile": "cypress/e2e/login-scenarios.cy.js",
      "file": "cypress/e2e/login-scenarios.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "097cdffc-84d6-4b04-80ff-d070f4c9e383",
          "title": "Cenários de Login da API - Desafio Universitário",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Cenário 1: Login com credenciais válidas - Admin",
              "fullTitle": "Cenários de Login da API - Desafio Universitário Cenário 1: Login com credenciais válidas - Admin",
              "timedOut": null,
              "duration": 3462,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log('🧪 Testando login com credenciais válidas (admin)');\n// Preencher formulário de login\ncy.get('#username').should('be.visible').type('admin', {\n  force: true\n});\ncy.get('#password').should('be.visible').type('admin123', {\n  force: true\n});\n// Verificar se campos foram preenchidos\ncy.get('#username').should('have.value', 'admin');\ncy.get('#password').should('have.value', 'admin123');\n// Submeter formulário\ncy.get('#loginForm').submit();\n// Verificar mensagem de sucesso\ncy.waitForMessage('Login realizado com sucesso!');\ncy.get('#message').should('have.class', 'green');\n// Verificar redirecionamento para área admin\ncy.checkRedirect('/admin');\n// Verificar se token foi armazenado\ncy.window().then(win => {\n  expect(win.localStorage.getItem('authToken')).to.not.be.null;\n  expect(win.localStorage.getItem('username')).to.equal('admin');\n});",
              "err": {},
              "uuid": "41eaeaad-919c-4e51-a0d0-4d1f898ba72f",
              "parentUUID": "097cdffc-84d6-4b04-80ff-d070f4c9e383",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cenário 1b: Login com credenciais válidas - Usuário comum",
              "fullTitle": "Cenários de Login da API - Desafio Universitário Cenário 1b: Login com credenciais válidas - Usuário comum",
              "timedOut": null,
              "duration": 2693,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log('🧪 Testando login com credenciais válidas (usuário comum)');\n// Preencher formulário de login\ncy.get('#username').type('usuario', {\n  force: true\n});\ncy.get('#password').type('senha123', {\n  force: true\n});\n// Submeter formulário\ncy.get('#loginForm').submit();\n// Verificar mensagem de sucesso\ncy.waitForMessage('Login realizado com sucesso!');\n// Verificar redirecionamento para roteiros públicos\ncy.checkRedirect('/public-trips');",
              "err": {},
              "uuid": "4922c388-c175-4537-b042-2cf9720dff0b",
              "parentUUID": "097cdffc-84d6-4b04-80ff-d070f4c9e383",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cenário 2: Login com credenciais inválidas",
              "fullTitle": "Cenários de Login da API - Desafio Universitário Cenário 2: Login com credenciais inválidas",
              "timedOut": null,
              "duration": 1317,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log('🧪 Testando login com credenciais inválidas');\n// Preencher formulário com credenciais inválidas (usuário válido, senha errada)\ncy.get('#username').type('usuario', {\n  force: true\n});\ncy.get('#password').type('senha_errada', {\n  force: true\n});\n// Submeter formulário\ncy.get('#loginForm').submit();\n// Verificar mensagem de erro (pode ser \"Username ou senha incorretos\")\ncy.get('#message').should('be.visible');\ncy.get('#message').should('contain.text', 'incorretos');\ncy.get('#message').should('have.class', 'red');\n// Verificar que permanece na página de login\ncy.url().should('eq', Cypress.config().baseUrl + '/');\ncy.get('#loginCard').should('be.visible');\n// Verificar que não há token armazenado\ncy.window().then(win => {\n  expect(win.localStorage.getItem('authToken')).to.be.null;\n});",
              "err": {},
              "uuid": "828fc5fc-60e1-4553-a03d-7d8e9636f01d",
              "parentUUID": "097cdffc-84d6-4b04-80ff-d070f4c9e383",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cenário 2b: Login com campos vazios",
              "fullTitle": "Cenários de Login da API - Desafio Universitário Cenário 2b: Login com campos vazios",
              "timedOut": null,
              "duration": 773,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log('🧪 Testando login com campos vazios');\n// Tentar submeter formulário vazio\ncy.get('#loginForm').submit();\n// Verificar validação HTML5 ou mensagem de erro customizada\ncy.get('#username:invalid').should('exist');\ncy.get('#password:invalid').should('exist');",
              "err": {},
              "uuid": "acc37193-9169-472e-ad7a-69c7381dd7ed",
              "parentUUID": "097cdffc-84d6-4b04-80ff-d070f4c9e383",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cenário 3: Múltiplas tentativas de login falharam - Bloqueio de conta",
              "fullTitle": "Cenários de Login da API - Desafio Universitário Cenário 3: Múltiplas tentativas de login falharam - Bloqueio de conta",
              "timedOut": null,
              "duration": 7775,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log('🧪 Testando bloqueio após múltiplas tentativas falhadas');\n// Simular 3 tentativas de login falhadas\nfor (let i = 1; i <= 3; i++) {\n  cy.log(`Tentativa ${i} de 3`);\n  // Limpar e preencher campos\n  cy.get('#username').clear({\n    force: true\n  }).type('admin', {\n    force: true\n  });\n  cy.get('#password').clear({\n    force: true\n  }).type('senha_errada', {\n    force: true\n  });\n  // Submeter formulário\n  cy.get('#loginForm').submit();\n  // Verificar resposta baseada na tentativa\n  if (i < 3) {\n    // Primeiras 2 tentativas: erro de credenciais com tentativas restantes\n    cy.get('#message').should('be.visible');\n    cy.get('#message').should('contain', 'Username ou senha incorretos');\n    cy.get('#message').should('have.class', 'red');\n    // Verificar que menciona tentativas restantes\n    const tentativasRestantes = 3 - i;\n    cy.get('#message').should('contain', `${tentativasRestantes} tentativas restantes`);\n    // Aguardar antes da próxima tentativa\n    cy.wait(2000);\n  } else {\n    // 3ª tentativa: conta deve ser bloqueada (mensagem original da API)\n    cy.get('#message').should('be.visible');\n    cy.get('#message').should('have.class', 'red');\n    cy.get('#message').should('contain', 'Conta bloqueada devido a múltiplas tentativas falhadas');\n  }\n}\n// Verificar que tentativa adicional também falha (conta bloqueada)\ncy.log('🔒 Verificando que conta permanece bloqueada');\ncy.get('#username').clear({\n  force: true\n}).type('admin', {\n  force: true\n});\ncy.get('#password').clear({\n  force: true\n}).type('admin123', {\n  force: true\n}); // Senha correta, mas conta bloqueada\ncy.get('#loginForm').submit();\n// Deve mostrar que conta está bloqueada, mesmo com senha correta\ncy.get('#message').should('be.visible');\ncy.get('#message').should('contain', 'Conta bloqueada devido a múltiplas tentativas falhadas');\ncy.get('#message').should('have.class', 'red');",
              "err": {},
              "uuid": "6a9cfca7-90bb-4a77-a8fe-ef507d1c89b4",
              "parentUUID": "097cdffc-84d6-4b04-80ff-d070f4c9e383",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cenário 4: Recuperação de senha por email",
              "fullTitle": "Cenários de Login da API - Desafio Universitário Cenário 4: Recuperação de senha por email",
              "timedOut": null,
              "duration": 4129,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log('🧪 Testando recuperação de senha');\n// Clicar no link \"Esqueci minha senha\"\ncy.get('#forgotPasswordLink').should('be.visible').click();\n// Verificar se formulário de recuperação apareceu\ncy.get('#forgotCard').should('be.visible');\ncy.get('#loginCard').should('not.be.visible');\n// Preencher email válido\ncy.get('#email').should('be.visible').type('admin@teste.com', {\n  force: true\n});\n// Verificar se email foi preenchido corretamente\ncy.get('#email').should('have.value', 'admin@teste.com');\n// Submeter formulário\ncy.get('#forgotForm').submit();\n// Verificar mensagem de sucesso (deve aparecer como toast)\ncy.get('.toast', {\n  timeout: 10000\n}).should('be.visible');\ncy.get('.toast').should('contain', 'Email de recuperação enviado!');\ncy.get('.toast').should('contain', 'Verifique sua caixa de entrada');\n// Verificar que retorna ao login automaticamente após alguns segundos\ncy.get('#loginCard', {\n  timeout: 15000\n}).should('be.visible');\ncy.get('#forgotCard').should('not.be.visible');",
              "err": {},
              "uuid": "dce510ab-d462-468a-b377-485543028b22",
              "parentUUID": "097cdffc-84d6-4b04-80ff-d070f4c9e383",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cenário 4b: Recuperação com email inválido",
              "fullTitle": "Cenários de Login da API - Desafio Universitário Cenário 4b: Recuperação com email inválido",
              "timedOut": null,
              "duration": 1244,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log('🧪 Testando recuperação com email inválido');\n// Ir para formulário de recuperação\ncy.get('#forgotPasswordLink').click();\ncy.get('#forgotCard').should('be.visible');\n// Tentar com email inválido\ncy.get('#email').type('email_inexistente@test.com', {\n  force: true\n});\ncy.get('#forgotForm').submit();\n// Deve mostrar mensagem apropriada (email não encontrado) - via toast\ncy.get('.toast', {\n  timeout: 10000\n}).should('be.visible');\ncy.get('.toast').should('contain', 'Usuário não encontrado');",
              "err": {},
              "uuid": "a75eea34-0cb2-4e11-9b1b-177ef7725848",
              "parentUUID": "097cdffc-84d6-4b04-80ff-d070f4c9e383",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cenário 4c: Validação de formato de email",
              "fullTitle": "Cenários de Login da API - Desafio Universitário Cenário 4c: Validação de formato de email",
              "timedOut": null,
              "duration": 1025,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log('🧪 Testando validação de formato de email');\n// Ir para formulário de recuperação\ncy.get('#forgotPasswordLink').click();\n// Tentar com formato de email inválido\ncy.get('#email').type('email-invalido', {\n  force: true\n});\ncy.get('#forgotForm').submit();\n// Verificar validação HTML5 ou customizada\ncy.get('#email:invalid').should('exist');",
              "err": {},
              "uuid": "0cbc5dae-3cac-434f-a7dc-dcb9427c39bd",
              "parentUUID": "097cdffc-84d6-4b04-80ff-d070f4c9e383",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Interface e Navegação: Verificar elementos da página",
              "fullTitle": "Cenários de Login da API - Desafio Universitário Interface e Navegação: Verificar elementos da página",
              "timedOut": null,
              "duration": 1010,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log('🧪 Testando interface e navegação');\n// Verificar elementos principais da página\ncy.get('nav').should('be.visible');\ncy.get('.brand-logo').should('contain', 'Roteiro de Férias');\ncy.get('#loginCard').should('be.visible');\ncy.get('footer').should('be.visible');\n// Testar botão \"Sobre\"\ncy.get('#aboutBtn').click();\ncy.get('#aboutCard').should('be.visible');\ncy.get('#loginCard').should('not.be.visible');\n// Voltar ao login\ncy.get('#backToLoginFromAbout').click();\ncy.get('#loginCard').should('be.visible');\ncy.get('#aboutCard').should('not.be.visible');\n// Testar navegação entre formulários\ncy.get('#forgotPasswordLink').click();\ncy.get('#forgotCard').should('be.visible');\ncy.get('#backToLogin').click();\ncy.get('#loginCard').should('be.visible');\ncy.get('#forgotCard').should('not.be.visible');",
              "err": {},
              "uuid": "18b9d405-a7e6-442f-aad8-c368f0292d40",
              "parentUUID": "097cdffc-84d6-4b04-80ff-d070f4c9e383",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Integração: Verificar comunicação com API backend",
              "fullTitle": "Cenários de Login da API - Desafio Universitário Integração: Verificar comunicação com API backend",
              "timedOut": null,
              "duration": 673,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log('🧪 Testando comunicação com API backend');\n// Verificar se API está respondendo\ncy.request({\n  url: '/health',\n  method: 'GET'\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('status', 'ok');\n});\n// Verificar proxy da API de login\ncy.request({\n  url: '/api/login',\n  method: 'POST',\n  body: {\n    username: 'test',\n    password: 'test'\n  },\n  failOnStatusCode: false\n}).then(response => {\n  // API deve responder (mesmo que com erro de credenciais)\n  expect(response.status).to.be.oneOf([200, 401, 423]);\n  expect(response.body).to.have.property('success');\n});",
              "err": {},
              "uuid": "dcf6403e-cf87-4416-b31f-0ab8326998a0",
              "parentUUID": "097cdffc-84d6-4b04-80ff-d070f4c9e383",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "41eaeaad-919c-4e51-a0d0-4d1f898ba72f",
            "4922c388-c175-4537-b042-2cf9720dff0b",
            "828fc5fc-60e1-4553-a03d-7d8e9636f01d",
            "acc37193-9169-472e-ad7a-69c7381dd7ed",
            "6a9cfca7-90bb-4a77-a8fe-ef507d1c89b4",
            "dce510ab-d462-468a-b377-485543028b22",
            "a75eea34-0cb2-4e11-9b1b-177ef7725848",
            "0cbc5dae-3cac-434f-a7dc-dcb9427c39bd",
            "18b9d405-a7e6-442f-aad8-c368f0292d40",
            "dcf6403e-cf87-4416-b31f-0ab8326998a0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24101,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mochawesome",
        "overwrite": false,
        "html": false,
        "json": true,
        "timestamp": "mmddyyyy_HHMMss"
      },
      "version": "6.2.0"
    }
  }
}